// Generated by CoffeeScript 1.3.3
(function() {
  var Client, Connection, EventEmitter, exports, net, redis, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  net = require('net');

  EventEmitter = require('events').EventEmitter;

  redis = require("redis");

  _ = require("underscore");

  exports = module.exports = {
    createConnection: function(port, host, options) {
      var net_client, redis_client;
      if (port == null) {
        port = 6379;
      }
      if (host == null) {
        host = "127.0.0.1";
      }
      net_client = net.createConnection(port, host);
      redis_client = new exports.Connection(net_client, options);
      redis_client.port = port;
      redis_client.host = host;
      return redis_client;
    },
    Connection: Connection = (function(_super) {

      __extends(Connection, _super);

      function Connection() {
        Connection.__super__.constructor.apply(this, arguments);
        this.map = {};
        this.on('message', function(channel, data) {
          var client, cmap, _id, _results;
          if (!(cmap = this.map[channel])) {
            return;
          }
          _results = [];
          for (_id in cmap) {
            client = cmap[_id];
            _results.push(client != null ? client.emit('message', channel, data) : void 0);
          }
          return _results;
        });
      }

      Connection.prototype.createClient = function() {
        return new exports.Client(this);
      };

      Connection.prototype.subscribeClient = function(client, channel, cb) {
        var cmap, _base, _ref;
        cmap = (_ref = (_base = this.map)[channel]) != null ? _ref : _base[channel] = {};
        if (_.isEmpty(cmap)) {
          this.subscribe(channel, cb);
        }
        if (cmap[client._id] != null) {
          return false;
        }
        cmap[client._id] = client;
        return true;
      };

      Connection.prototype.unsubscribeCliet = function(client, channel, cb) {
        var cmap;
        cmap = this.map[channel];
        if ((cmap != null ? cmap[client._id] : void 0) == null) {
          return false;
        }
        delete cmap[client._id];
        if (_.isEmpty(cmap)) {
          this.unsubscribe(channel, cb);
        } else {
          process.nextTick(cb);
        }
        return true;
      };

      return Connection;

    })(redis.RedisClient),
    Client: Client = (function(_super) {

      __extends(Client, _super);

      function Client(connection) {
        this.connection = connection;
        this._id = _.uniqueId('sub');
      }

      Client.prototype.subscribe = function(channel, cb) {
        return this.connection.subscribeClient(this, channel, cb);
      };

      Client.prototype.unsubscribe = function(channel, cb) {
        return this.connection.subscribeClient(this, channel, cb);
      };

      return Client;

    })(EventEmitter)
  };

}).call(this);
